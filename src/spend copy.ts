import { Blockfrost, CML, Data, fromText, getAddressDetails, Lucid, UTxO } from "@lucid-evolution/lucid";
import { generateSpendScript, getRedeemer, readValidators, getInput, serialiseReferenceInputs, serialiseBody, generateMintPolicy } from "./prepare-contracts";
import * as fs from 'fs';
import { OutputReference, Proof } from "./contract-types";

const lucid = await Lucid(
    new Blockfrost(
        "https://cardano-preview.blockfrost.io/api/v0",
        "preview1OQSKlQ6tb3WYBx9bqlz7kDFhuglmfvL"
    ),
    "Preview"
);
const prvKey = fs.readFileSync('./src/me.sk').toString();
lucid.selectWallet.fromPrivateKey(prvKey);
const walletAddress = await lucid.wallet().address();

console.log('Address details', getAddressDetails("addr_test1xqlvgp0uhwfxzace35xsscdx806qlqvkazkpgqfsvwyu08e7cszlewujv9m3nrgdpps6vwl5p7qed69vzsqnqcufc70shf73et"));

const policyId = "b8a5e329b500a66376047165cdfce62c3ecf245fd81d101533f81422";
const lovelace = 10_000_000;
const tokenName = fromText('Fontus#000');
console.log('Token Name:', tokenName);

const assetUnit = `${policyId}${tokenName}`;
const validators = readValidators();

const { spend, spendAddress } = generateSpendScript(validators.spend.script, "Preview", policyId, tokenName);
const nonce = "9565b074c5c930aff80cac59a2278b70";
const { mint } = generateMintPolicy(validators.mint.script, nonce);

console.log('Spend Address:', spendAddress);
// console.log('Spend Script:', spend);

const validTo = 1729716288632 + (22 * 60 * 60 * 1000); // 10 hour

// User Id
const userId = BigInt(`0x${tokenName}`);
console.log('User Id:', userId);
let txId = "7A1E56DF9B3535DDDC51783D075E3C28EE223310DBAAD0F8E40FBDD38840CE6B";
let hash = 10343661163184219313272354919635983875711247223011266158462328948931637363678n
let pA = "a49039e4c25fb4191caea2e625177fccced340a5a65206e5402815a8b49d8bbb378f914548e16270fb701e973b4b66da"
let pB = "8d091b31ed91a73aa626b2a32c245eeea57d4d971d65e0afe057bcaddb10edbf7fc9d68d276cd0c4704d87d519d11d55003ea0bd5e3bc096523e2307ad2da0461ccb27ea234e18b8342c272abb6d3daf840c63a6f414b1f48b79924137f7a1a3"
let pC = "b4883a55867b148110643951367044feca119cb3815fa7660a96fe87ff229a2778b6be20f2811f76ad5d83f00987679d"
let spendRedeemer = getRedeemer(userId, hash, txId, pA, pB, pC);

let aikenProofCbor = "D8799F5830818C07417BE4D158FDC3604892F140DFF244E2161012AA91352114AB94B74BE21CF4F3CF57FAC49CB9AA4985FDD194CD5F5840ADCCA26FDD822728B1F7B63E3C7018D02FEBD9ADA51B546FB221EB0B980344D05452AD38674CA06190A5780F05DD482819CDE2464912C3AA0D847CD708722977582014A19851DDB787FBC041EC1FF09F8CE38B6231327F151B20F364F1304AA0E971FF5830B7551E8D80C741853A16FBB135C86263ADAACE362E76CD5AAF5264CD920B2839A3CE728656A7743E12FA2625E8FEA9CFFF".toLowerCase();

const proof: Proof = {
    pA: "818c07417be4d158fdc3604892f140dff244e2161012aa91352114ab94b74be21cf4f3cf57fac49cb9aa4985fdd194cd",
    pB: "adcca26fdd822728b1f7b63e3c7018d02febd9ada51b546fb221eb0b980344d05452ad38674ca06190a5780f05dd482819cde2464912c3aa0d847cd70872297714a19851ddb787fbc041ec1ff09f8ce38b6231327f151b20f364f1304aa0e971",
    pC: "b7551e8d80c741853a16fbb135c86263adaace362e76cd5aaf5264cd920b2839a3ce728656a7743e12fa2625e8fea9cf"
}
let lucidProof = Data.to(proof, Proof, { canonical: false });
console.log('Serialise (Lucid):', lucidProof);
console.log('Serialise (Aiken):', aikenProofCbor);

const utxoRef: UTxO = {
    // address: "addr_test1vq7uu7zy7d4j8wxrly90hfq25xyw0uwn7m52e5w4gnk3m2gprf2za",
    address: spendAddress,
    txHash: "b8b523b596040bb749b23848ea976ee238d5693dca8daa3771e17f3874a9c17e",
    // txHash: "0000000000000000000000000000000000000000000000000000000000000000",
    outputIndex: 0,
    // assets: { lovelace: BigInt(4_219_490), ["b8a5e329b500a66376047165cdfce62c3ecf245fd81d101533f81422466f6e74757323303030"]: BigInt(1) },
    assets: { lovelace: 1500000n, [assetUnit]: 1n },
    // datum: "d8799f4a466f6e74757323303030d8799f5830b18db01619508d589ba45cdcc9c9ab4dbddc33e08bc4dbddea565c10dc743fd66510d3f49c6343999caf540eaa0c4e035f5840845f7a4f6d0fbcaf0648d9c2657f19a33f4e2124c284d68688f209abf54d5a1d1afc47de55c24e662c47f7632a760a8016e8ba01eb4b0d4a2db67fe5abed5ae15820a09e035dbe984a1426e440a4f0038276792f87cdb2bc35dc185a618d352d7f54ff5f584093e02b6052719f607dacd3a088274f65596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e024aa2b2f08f0a91260805272dc510515820c6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb8ff5f5840a2341a098a95305955386a3e0e4e2879e6206342b9c9a8da0559190e82f3ed1478158f2ca1ef4db7deab124b7c85b0f403d1a968b4812e6c9c9392d926b86da5582001e23f6c94cffcc62b02393d7807a6f381e40ca49a9b4a2b522518f72927ca15ff9f5830ac2fcd68b85b64e6c3bc11a9dadd1b24e7786738475cf2fe0acdd9b41f773af18ec12601e368d2e920f299f9e6bed4805830a33061a2549ea773d275539b2e92caa6f936404635db1da3199ec71f06faf2cba8effef6860bcb0376259a681ef043c35830a3f6177ea5ef5797249df745be266271bd65a6a1c9c9fae2df3dd2c7e9e6b5751f288fba11950455a9a1f9a054bad8545830a5d227c013957479be181bf43c394a49e8bf14585fd04a4ca72102e3e5ab41661411eeb15986ad3d3a09eb25bb2b7b12583093a152a9cd7d4b81a08989f67fcb958e96b14ef4d3cefd26ad992059df4d252a9f00b5f9f2b5b8a59cf4eca9d78848935830b8cd6daceeaa3b53d707ae2b99dc87e0dbbf58a1e310cff5cd3bea151d90962372de834a519a879c05bc470a016202d65830a6b5d4a12faf84ac46dba1793716cdb14009af64d0edcd5f1c0ca872fa53bc5732da912222fc3d4fc7ea2fc1b9fbff41ffffff"
    datum
}


const utxo: UTxO = {
    address: spendAddress,
    txHash: "3658cf03ab7407f816548e5a465b6f51779be54bb45f57155776864e454804ac",
    outputIndex: 0,
    assets: { lovelace: BigInt(50_000_000) }
}

const txBuilder = await lucid
    .newTx()
    .readFrom([utxoRef])
    .collectFrom([utxo], spendRedeemer)
    // consume script
    .attach.SpendingValidator(spend)
    .attach.MintingPolicy(mint)
    
    // .pay.ToAddress(
    //     walletAddress, 
    //     {
    //         lovelace: BigInt(lovelace),
            
    //     }
    // )
    .pay.ToAddressWithData(
        walletAddress, 
        { kind: "inline", value},
        {
            lovelace: BigInt(lovelace),
            
        }
    )
    .mintAssets({
        [assetUnit]:  1n
    }, Data.void())
    .validTo(validTo);

const txConfig = (await txBuilder.config());
const rawBuilder = txConfig.txBuilder;

const draftTx = rawBuilder.build_for_evaluation(CML.ChangeSelectionAlgo.Default, CML.Address.from_bech32(spendAddress)).draft_body();
const challengeCbor = serialiseBody(draftTx).toUpperCase();
console.log('serialise (challenge):', challengeCbor);

console.log('Deserialise (Aiken)', CML.PlutusData.from_cbor_hexto_json());

console.log('Deserialise (Lucid-Evolution)', CML.PlutusData.from_cbor_hex(challengeCbor).to_json());

// console.log('serialise (reference_inputs):', draftTx.reference_inputs()!.get(0).to_cbor_hex());
// console.log('serialise (reference_inputs):', Data.to({
//     transaction_id: utxoRef.txHash,
//     output_index: BigInt(utxoRef.outputIndex)
// }, OutputReference));

// // console.log('Draft Tx:', draftTx.to_cbor_hex());
// console.log('Draft Tx (JSON):', draftTx.to_json());

// console.log('UTxO', CML.PlutusData.from_cbor_hex('D8799F5820B8B523B596040BB749B23848EA976EE238D5693DCA8DAA3771E17F3874A9C17E00FF').to_json());

    
const tx = await txBuilder.complete({ canonical: true });
const txSigned = await tx.sign.withWallet().complete();
// console.log('cbor', await tx.toString());
console.log('cbor', txSigned.toCBOR({canonical: false}));
console.log('cbor (canonical)', txSigned.toCBOR({canonical: true}));
console.log('Tx Id:', txSigned.toHash());

txId = txSigned.toHash();
// TODO: update proof
spendRedeemer = getRedeemer(userId, hash, txId, pA, pB, pC);



// const txHash = await txSigned.submit();
// console.log('Tx Id (Submit):', txHash);
// const success = await lucid.awaitTx(txHash);
// console.log('Success?', success);